/**
 * Vendor API Proxy Functions
 * These functions route through Next.js API to avoid CORS
 */

import axios from 'axios';

// Helper to get vendor auth headers
function getVendorAuthHeaders() {
  if (typeof window === 'undefined') return {};
  
  const vendorAuth = localStorage.getItem('vendor_auth');
  
  if (!vendorAuth) {
    throw new Error('Not authenticated');
  }
  
  return {
    'Authorization': `Basic ${vendorAuth}`
  };
}

// Proxy request helper
async function vendorProxyRequest(endpoint: string, method: string = 'GET', data?: any) {
  const headers = getVendorAuthHeaders();
  
  const response = await axios({
    url: `/api/vendor-proxy?endpoint=${encodeURIComponent(endpoint)}`,
    method,
    headers,
    data,
  });
  
  return response;
}

// Public vendor endpoints
export async function getAllVendorsProxy() {
  try {
    const response = await axios.get('/api/vendor-proxy?endpoint=flora-vendors/v1/vendors');
    return response.data;
  } catch (error) {
    console.error("Error fetching vendors:", error);
    return [];
  }
}

export async function getVendorBySlugProxy(slug: string) {
  try {
    const response = await axios.get(`/api/vendor-proxy?endpoint=flora-vendors/v1/vendors/${slug}`);
    return response.data;
  } catch (error: any) {
    if (error.response?.status === 404) {
      return null;
    }
    throw error;
  }
}

// Authenticated vendor endpoints
export async function getVendorDashboardProxy() {
  const response = await vendorProxyRequest('flora-vendors/v1/vendors/me/dashboard');
  return response.data;
}

export async function getVendorMyProductsProxy(page = 1, per_page = 20, status?: string) {
  const params: any = { page, per_page };
  if (status) params.status = status;
  
  const cacheBuster = `_t=${Date.now()}`;
  const queryString = new URLSearchParams(params).toString();
  
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/products?${queryString}&${cacheBuster}`
  );
  return response.data;
}

export async function getVendorInventoryProxy() {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/inventory?${cacheBuster}`
  );
  return response.data;
}

export async function getVendorBrandingProxy() {
  const response = await vendorProxyRequest('flora-vendors/v1/vendors/me/branding');
  return response.data;
}

export async function getVendorSettingsProxy() {
  const response = await vendorProxyRequest('flora-vendors/v1/vendors/me/settings');
  return response.data;
}

// Helper to auto-create inventory if needed
async function ensureInventoryExists(productId: number) {
  try {
    await vendorProxyRequest(
      `flora-vendors/v1/vendors/me/inventory/${productId}/set?_t=${Date.now()}`,
      'POST',
      { quantity: 0, reason: 'Auto-initialize inventory record' }
    );
  } catch (e) {
    // Ignore - record might exist
  }
}

// Helper to auto-create inventory if needed
async function ensureInventoryExists(productId: number) {
  try {
    await vendorProxyRequest(
      `flora-vendors/v1/vendors/me/inventory/${productId}/set?_t=${Date.now()}`,
      'POST',
      { quantity: 0, reason: 'Auto-initialize inventory record' }
    );
  } catch (e) {
    // Ignore - record might exist
  }
}

export async function adjustVendorInventoryProxy(productId: number, operation: 'add' | 'subtract', amount: number, reason?: string) {
  const cacheBuster = `_t=${Date.now()}`;
  try {
    const response = await vendorProxyRequest(
      `flora-vendors/v1/vendors/me/inventory/${productId}/adjust?${cacheBuster}`,
      'POST',
      { operation, amount, reason }
    );
    return response.data;
  } catch (error: any) {
    // If no inventory record exists, create one and retry
    if (error.response?.data?.code === 'no_inventory' || error.response?.data?.details?.code === 'no_inventory') {
      await ensureInventoryExists(productId);
      // Retry the adjustment
      const retryResponse = await vendorProxyRequest(
        `flora-vendors/v1/vendors/me/inventory/${productId}/adjust?${cacheBuster}`,
        'POST',
        { operation, amount, reason }
      );
      return retryResponse.data;
    }
    throw error;
  }
}

export async function setVendorInventoryProxy(productId: number, quantity: number, reason?: string) {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/inventory/${productId}/set?${cacheBuster}`,
    'POST',
    { quantity, reason }
  );
  return response.data;
}

export async function createVendorChangeRequestProxy(productId: number, changes: any) {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/products/${productId}/change-request?${cacheBuster}`,
    'POST',
    changes
  );
  return response.data;
}

export async function getVendorOrdersProxy(page = 1, per_page = 20) {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/orders?page=${page}&per_page=${per_page}&${cacheBuster}`
  );
  return response.data;
}

export async function getVendorOrderProxy(orderId: number) {
  const response = await vendorProxyRequest(`flora-vendors/v1/vendors/me/orders/${orderId}`);
  return response.data;
}

export async function getVendorPayoutsProxy() {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(`flora-vendors/v1/vendors/me/payouts?${cacheBuster}`);
  return response.data;
}

export async function createVendorProductProxy(productData: any) {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/products?${cacheBuster}`,
    'POST',
    productData
  );
  return response.data;
}

export async function updateVendorProductProxy(productId: number, productData: any) {
  const cacheBuster = `_t=${Date.now()}`;
  const response = await vendorProxyRequest(
    `flora-vendors/v1/vendors/me/products/${productId}?${cacheBuster}`,
    'PUT',
    productData
  );
  return response.data;
}

export async function uploadVendorImagesProxy(files: File[]) {
  const formData = new FormData();
  files.forEach((file, index) => {
    formData.append(`image_${index}`, file);
  });
  
  const authToken = typeof window !== 'undefined' ? localStorage.getItem('vendor_auth') : null;
  if (!authToken) {
    throw new Error('Not authenticated');
  }
  
  const cacheBuster = `_t=${Date.now()}`;
  const response = await fetch(
    `/api/vendor/upload?type=images&${cacheBuster}`,
    {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${authToken}`
      },
      body: formData
    }
  );
  
  if (!response.ok) {
    throw new Error('Image upload failed');
  }
  
  return response.json();
}

export async function uploadVendorCOAProxy(file: File, metadata?: any) {
  const formData = new FormData();
  formData.append('coa', file);
  
  if (metadata) {
    Object.keys(metadata).forEach(key => {
      formData.append(key, metadata[key]);
    });
  }
  
  const authToken = typeof window !== 'undefined' ? localStorage.getItem('vendor_auth') : null;
  if (!authToken) {
    throw new Error('Not authenticated');
  }
  
  const cacheBuster = `_t=${Date.now()}`;
  const response = await fetch(
    `/api/vendor/upload?type=coa&${cacheBuster}`,
    {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${authToken}`
      },
      body: formData
    }
  );
  
  if (!response.ok) {
    throw new Error('COA upload failed');
  }
  
  return response.json();
}
