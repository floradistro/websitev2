var r=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var a=()=>(async n=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(n)}catch(e){return  false}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));function i(){return typeof crossOriginIsolated>"u"?false:crossOriginIsolated}function A(){try{return new WebAssembly.Memory({initial:1,maximum:1,shared:true}).buffer.constructor.name==="SharedArrayBuffer"}catch(n){return  false}}async function c(){return r()}async function o(){if(!await a())return  false;let e=null;try{e=new Worker(URL.createObjectURL(new Blob(['postMessage("Worker" in self);'],{type:"text/javascript"})),{name:"nestedWorkerTest"});}catch(t){return  false}return new Promise(t=>{if(e==null){t(false);return}e.onmessage=s=>{e==null||e.terminate(),t(s.data);};})}async function b(){let n=await o();return i()&&A()&&n}export{i as a,A as b,c,o as d,b as e};