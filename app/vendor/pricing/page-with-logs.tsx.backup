"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { DollarSign, Save, AlertCircle, Check, Calculator, Package, Plus, Trash2 } from 'lucide-react';
import { showNotification } from '@/components/NotificationToast';
import { useVendorAuth } from '@/context/VendorAuthContext';

// Unit conversion utilities (inline to avoid SSR issues)
const CONVERSIONS: any = {
  gram: 1,
  ounce: 28.3495,
  pound: 453.592,
  kilogram: 1000,
  milliliter: 1,
  liter: 1000,
  fluid_ounce: 29.5735,
  gallon: 3785.41
};

function convertUnits(value: number, fromUnit: string, toUnit: string): number {
  if (fromUnit === toUnit) return value;
  const baseValue = value * (CONVERSIONS[fromUnit] || 1);
  return baseValue / (CONVERSIONS[toUnit] || 1);
}

function formatUnit(unit: string): string {
  const labels: any = {
    'milligram': 'mg', 'gram': 'g', 'ounce': 'oz', 'pound': 'lb', 'kilogram': 'kg',
    'milliliter': 'ml', 'liter': 'L', 'fluid_ounce': 'fl oz', 'gallon': 'gal'
  };
  return labels[unit] || unit;
}

interface PriceBreak {
  break_id: string;
  label: string;
  qty?: number;
  unit?: string;
  min_qty?: number;
  max_qty?: number | null;
  sort_order: number;
}

interface Blueprint {
  id: string;
  name: string;
  slug: string;
  description: string;
  tier_type: string;
  price_breaks: PriceBreak[];
}

interface PricingConfig {
  id: string;
  vendor_id: string;
  blueprint_id: string;
  pricing_values: { [breakId: string]: { price?: string; enabled: boolean } };
  is_active: boolean;
  blueprint?: Blueprint;
  display_unit?: string;
}

export default function VendorPricingPage() {
  const { vendor, isAuthenticated, isLoading: authLoading } = useVendorAuth();
  const [loading, setLoading] = useState(true);
  const [configs, setConfigs] = useState<PricingConfig[]>([]);
  const [availableBlueprints, setAvailableBlueprints] = useState<Blueprint[]>([]);
  const [editingPrices, setEditingPrices] = useState<{ [configId: string]: any }>({});
  const [customTiers, setCustomTiers] = useState<{ [configId: string]: PriceBreak[] }>({});
  const [displayUnits, setDisplayUnits] = useState<{ [configId: string]: string }>({});
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (!authLoading && isAuthenticated) {
      const vendorId = localStorage.getItem('vendor_id');
      if (vendorId) {
        loadPricingData(vendorId);
      }
    }
  }, [authLoading, isAuthenticated]);


  async function loadPricingData(vendorId: string) {
    setLoading(true);
    try {
      const res = await fetch(`/api/vendor/pricing-config?vendor_id=${vendorId}`);
      const data = await res.json();

      if (data.success) {
        setConfigs(data.configs || []);
        setAvailableBlueprints(data.available_blueprints || []);
        
        // Initialize editing state
        const initialEditing: any = {};
        const initialTiers: any = {};
        const initialUnits: any = {};
        
        data.configs?.forEach((config: PricingConfig) => {
          // Initialize pricing values with enabled: true by default
          const pricingVals = config.pricing_values || {};
          const initializedVals: any = {};
          
          config.blueprint?.price_breaks.forEach(pb => {
            const existingVal = pricingVals[pb.break_id];
            // Ensure enabled field exists - default to true if not set
            initializedVals[pb.break_id] = {
              price: existingVal?.price || '',
              enabled: existingVal?.enabled !== undefined ? existingVal.enabled : true
            };
          });
          
          initialEditing[config.id] = initializedVals;
          initialTiers[config.id] = config.blueprint?.price_breaks || [];
          
          // Set display unit (default based on blueprint type)
          const isWholesale = config.blueprint?.slug.includes('wholesale');
          initialUnits[config.id] = config.display_unit || (isWholesale ? 'pound' : 'gram');
        });
        
        setEditingPrices(initialEditing);
        setCustomTiers(initialTiers);
        setDisplayUnits(initialUnits);
      }
    } catch (error) {
      console.error('Error loading pricing:', error);
    } finally {
      setLoading(false);
    }
  }

  function addTier(configId: string) {
    const config = configs.find(c => c.id === configId);
    if (!config) return;

    const currentTiers = customTiers[configId] || [];
    const nextOrder = currentTiers.length + 1;
    const isWholesale = config.blueprint?.slug.includes('wholesale');

    const newTier: PriceBreak = {
      break_id: `custom_tier_${nextOrder}_${Date.now()}`,
      label: isWholesale ? `Tier ${nextOrder} (Custom)` : `Custom ${nextOrder}`,
      min_qty: isWholesale ? nextOrder * 10 : undefined,
      max_qty: isWholesale ? null : undefined,
      qty: isWholesale ? undefined : 1,
      unit: isWholesale ? 'lb' : 'g',
      sort_order: nextOrder
    };

    setCustomTiers(prev => ({
      ...prev,
      [configId]: [...currentTiers, newTier]
    }));
  }

  function removeTier(configId: string, breakId: string) {
    setCustomTiers(prev => ({
      ...prev,
      [configId]: prev[configId].filter(t => t.break_id !== breakId)
    }));

    // Also remove from pricing values
    setEditingPrices(prev => {
      const updated = { ...prev };
      if (updated[configId]) {
        delete updated[configId][breakId];
      }
      return updated;
    });
  }

  function updateTier(configId: string, breakId: string, updates: Partial<PriceBreak>) {
    setCustomTiers(prev => ({
      ...prev,
      [configId]: prev[configId].map(tier =>
        tier.break_id === breakId ? { ...tier, ...updates } : tier
      )
    }));
  }

  async function enableBlueprint(blueprintId: string) {
    const vendorId = localStorage.getItem('vendor_id');
    if (!vendorId) return;

    // Find the blueprint to initialize pricing_values properly
    const blueprint = availableBlueprints.find(b => b.id === blueprintId);
    if (!blueprint) return;

    // Initialize pricing_values with all tiers enabled by default
    const initialPricingValues: any = {};
    blueprint.price_breaks.forEach(pb => {
      initialPricingValues[pb.break_id] = {
        price: '',
        enabled: true
      };
    });

    try {
      setSaving(true);
      const response = await fetch('/api/vendor/pricing-config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          vendor_id: vendorId,
          blueprint_id: blueprintId,
          pricing_values: initialPricingValues,
          display_unit: blueprint.slug.includes('wholesale') ? 'pound' : 'gram',
          is_active: true
        })
      });

      const data = await response.json();
      
      if (data.success) {
        showNotification({
          type: 'success',
          title: 'Pricing Enabled',
          message: 'Configure your prices below. They will apply to all your products.'
        });
        loadPricingData(vendorId);
      }
    } catch (error: any) {
      showNotification({
        type: 'error',
        title: 'Error',
        message: error.message || 'Failed to enable pricing'
      });
    } finally {
      setSaving(false);
    }
  }

  async function saveConfig(config: PricingConfig) {
    const vendorId = localStorage.getItem('vendor_id');
    if (!vendorId) return;

    // Validate at least one tier is enabled with a price
    const prices = editingPrices[config.id] || {};
    const hasAtLeastOnePrice = Object.values(prices).some((p: any) => 
      p.enabled !== false && p.price && parseFloat(p.price) > 0
    );
    
    if (!hasAtLeastOnePrice) {
      showNotification({
        type: 'warning',
        title: 'No Active Prices',
        message: 'Please enable and set at least one tier price before saving.'
      });
      return;
    }

    try {
      setSaving(true);
      
      const response = await fetch(`/api/vendor/pricing-config/${config.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          pricing_values: editingPrices[config.id],
          custom_price_breaks: customTiers[config.id],
          display_unit: displayUnits[config.id],
          is_active: true
        })
      });

      const data = await response.json();
      
      if (data.success) {
        showNotification({
          type: 'success',
          title: 'Prices Saved',
          message: 'Your pricing has been updated and applies to all products.'
        });
        loadPricingData(vendorId);
      }
    } catch (error: any) {
      showNotification({
        type: 'error',
        title: 'Save Failed',
        message: error.message || 'Failed to save pricing'
      });
    } finally {
      setSaving(false);
    }
  }

  function updatePrice(configId: string, breakId: string, price: string) {
    setEditingPrices(prev => ({
      ...prev,
      [configId]: {
        ...prev[configId],
        [breakId]: {
          ...prev[configId]?.[breakId],
          price,
          enabled: prev[configId]?.[breakId]?.enabled !== false ? true : prev[configId][breakId].enabled
        }
      }
    }));
  }

  function toggleTierEnabled(configId: string, breakId: string) {
    setEditingPrices(prev => {
      const current = prev[configId]?.[breakId] || {};
      const currentEnabled = current.enabled === true || current.enabled === undefined;
      const newEnabled = !currentEnabled;
      
      return {
        ...prev,
        [configId]: {
          ...prev[configId],
          [breakId]: {
            price: current.price || '',
            enabled: newEnabled
          }
        }
      };
    });
  }

  async function disableConfig(configId: string, configName: string) {
    const vendorId = localStorage.getItem('vendor_id');
    if (!vendorId) return;

    try {
      setSaving(true);
      
      const response = await fetch(`/api/vendor/pricing-config/${configId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          is_active: false
        })
      });

      const data = await response.json();
      
      if (data.success) {
        showNotification({
          type: 'success',
          title: 'Pricing Disabled',
          message: `${configName} has been disabled and removed from products.`
        });
        loadPricingData(vendorId);
      }
    } catch (error: any) {
      showNotification({
        type: 'error',
        title: 'Error',
        message: error.message || 'Failed to disable pricing'
      });
    } finally {
      setSaving(false);
    }
  }

  const isRetailVendor = configs.some(c => c.blueprint?.slug?.includes('retail'));
  const isWholesaleVendor = configs.some(c => c.blueprint?.slug?.includes('wholesale'));
  const isHybrid = isRetailVendor && isWholesaleVendor;

  return (
    <div className="w-full px-4 lg:px-0">
      {/* Header */}
      <div className="flex justify-between items-start gap-4 mb-8">
        <div className="min-w-0">
          <h1 className="text-2xl lg:text-3xl font-thin text-white/90 tracking-tight mb-2">
            Pricing
          </h1>
          <p className="text-white/40 text-xs font-light tracking-wide">
            CONFIGURE YOUR PRICING · AUTO-APPLIES TO ALL PRODUCTS
          </p>
        </div>
        <Link
          href="/vendor/cost-plus-pricing"
          className="flex items-center gap-2 bg-gradient-to-r from-green-600 to-green-500 text-white px-4 py-2.5 text-xs font-medium uppercase tracking-wider hover:from-green-700 hover:to-green-600 transition-all whitespace-nowrap"
        >
          <Calculator size={16} />
          <span className="hidden sm:inline">Cost-Plus Pricing</span>
          <span className="sm:hidden">Cost+</span>
        </Link>
      </div>

      {/* Info Banner */}
      <div className="bg-white/5 border border-white/10 p-4 mb-6 -mx-4 lg:mx-0">
        <div className="flex gap-3">
          <AlertCircle size={20} className="text-white/60 flex-shrink-0 mt-0.5" />
          <div>
            <p className="text-white/90 text-sm mb-1">How Pricing Works</p>
            <p className="text-white/50 text-xs leading-relaxed">
              Enable a pricing structure below and set your prices. Your pricing automatically applies to <strong className="text-white/70">all your products</strong>. 
              No need to assign individually. You can edit prices per product in the Inventory page if needed.
            </p>
          </div>
        </div>
      </div>

      {/* Vendor Type Indicator */}
      {!loading && configs.length > 0 && (
        <div className="flex items-center gap-2 mb-6 pb-6 border-b border-white/10">
          <Package size={16} className="text-white/60" />
          <span className="text-white/60 text-sm">Your Pricing Type:</span>
          {isHybrid && (
            <span className="px-3 py-1 bg-purple-500/20 text-purple-400 text-xs uppercase tracking-wider border border-purple-500/30">
              Hybrid (Retail + Wholesale)
            </span>
          )}
          {!isHybrid && isRetailVendor && (
            <span className="px-3 py-1 bg-blue-500/20 text-blue-400 text-xs uppercase tracking-wider border border-blue-500/30">
              Retail
            </span>
          )}
          {!isHybrid && isWholesaleVendor && (
            <span className="px-3 py-1 bg-green-500/20 text-green-400 text-xs uppercase tracking-wider border border-green-500/30">
              Wholesale
            </span>
          )}
        </div>
      )}

      {loading ? (
        <div className="text-center py-12">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white/60 mb-4"></div>
          <p className="text-white/60 text-sm">Loading pricing...</p>
        </div>
      ) : (
        <div className="space-y-6">
          {/* Active Configs */}
          {configs.map((config) => {
            if (!config.blueprint) return null;
            
            const isWholesale = config.blueprint.slug.includes('wholesale');
            
            return (
              <div key={config.id} className="bg-[#111111] border border-white/10 overflow-hidden -mx-4 lg:mx-0">
                {/* Header */}
                <div className="p-6 border-b border-white/10">
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-white text-lg font-medium">{config.blueprint.name}</h3>
                        {isWholesale && (
                          <span className="px-2 py-1 bg-green-500/20 text-green-400 text-xs uppercase tracking-wider border border-green-500/30">
                            Wholesale
                          </span>
                        )}
                        {!isWholesale && (
                          <span className="px-2 py-1 bg-blue-500/20 text-blue-400 text-xs uppercase tracking-wider border border-blue-500/30">
                            Retail
                          </span>
                        )}
                        <span className="px-2 py-1 bg-green-500/20 text-green-500 text-xs uppercase tracking-wider border border-green-500/30">
                          Active
                        </span>
                      </div>
                      <p className="text-white/50 text-sm">{config.blueprint.description}</p>
                    </div>
                    <button
                      onClick={() => disableConfig(config.id, config.blueprint?.name || 'pricing')}
                      disabled={saving}
                      className="text-red-500/60 hover:text-red-500 text-xs uppercase tracking-wider px-3 py-1.5 border border-red-500/30 hover:border-red-500/50 transition-all disabled:opacity-50"
                    >
                      Disable
                    </button>
                  </div>
                </div>

                {/* Price Configuration */}
                <div className="p-6">
                  {/* Unit of Measure Selector */}
                  <div className="bg-white/5 border border-white/10 p-4 mb-6">
                    <div className="flex flex-col md:flex-row md:items-center gap-4">
                      <div className="flex-1">
                        <label className="block text-white/90 text-sm font-medium mb-1">
                          Unit of Measure
                        </label>
                        <p className="text-white/50 text-xs">
                          Choose how you want to price and display this product (all units are synchronized)
                        </p>
                      </div>
                      <div className="md:w-64">
                        <select
                          value={displayUnits[config.id] || 'gram'}
                          onChange={(e) => setDisplayUnits(prev => ({ ...prev, [config.id]: e.target.value }))}
                          className="w-full bg-[#0a0a0a] border border-white/10 text-white px-4 py-3 rounded focus:outline-none focus:border-white/30 text-sm"
                        >
                          <optgroup label="Weight Units">
                            <option value="milligram">Milligrams (mg)</option>
                            <option value="gram">Grams (g)</option>
                            <option value="ounce">Ounces (oz)</option>
                            <option value="pound">Pounds (lb)</option>
                            <option value="kilogram">Kilograms (kg)</option>
                          </optgroup>
                          <optgroup label="Volume Units">
                            <option value="milliliter">Milliliters (ml)</option>
                            <option value="liter">Liters (L)</option>
                            <option value="fluid_ounce">Fluid Ounces (fl oz)</option>
                            <option value="gallon">Gallons (gal)</option>
                          </optgroup>
                        </select>
                      </div>
                    </div>
                    <div className="mt-3 bg-blue-500/10 border border-blue-500/30 px-3 py-2">
                      <p className="text-blue-400 text-xs">
                        💡 All units are synchronized: 453g = 1 lb, 1000ml = 1 L. Changing units updates the display only - stock levels stay the same.
                      </p>
                      {(() => {
                        const currentUnit = displayUnits[config.id] || 'gram';
                        if (currentUnit === 'pound') {
                          return <p className="text-white/60 text-xs mt-1">Currently showing prices in pounds (lb). 1g tier = 0.002 lb tier.</p>;
                        } else if (currentUnit === 'ounce') {
                          return <p className="text-white/60 text-xs mt-1">Currently showing prices in ounces (oz). 28g = 1 oz.</p>;
                        } else if (currentUnit === 'kilogram') {
                          return <p className="text-white/60 text-xs mt-1">Currently showing prices in kilograms (kg). 1000g = 1 kg.</p>;
                        }
                        return null;
                      })()}
                    </div>
                  </div>

                  {/* Helpful tip for tiered pricing */}
                  {isWholesale && config.blueprint.slug.includes('tiered') && (
                    <div className="bg-green-500/10 border border-green-500/30 p-4 mb-4">
                      <div className="flex gap-2">
                        <AlertCircle size={16} className="text-green-400 flex-shrink-0 mt-0.5" />
                        <div>
                          <p className="text-green-400 text-xs font-medium mb-1">Tiered Pricing Example:</p>
                          <p className="text-white/60 text-xs leading-relaxed">
                            Set different prices for different quantity ranges. Example: 1-10 lbs @ $1400/lb, 10-20 lbs @ $1200/lb, 20+ lbs @ $1000/lb.
                            Larger orders automatically get better prices!
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between mb-4">
                    <div>
                      <h4 className="text-white/90 text-sm uppercase tracking-wider mb-1">Configure Your Tiers & Prices</h4>
                      {(() => {
                        const allTiers = customTiers[config.id] || config.blueprint.price_breaks;
                        const enabledCount = allTiers.filter(t => 
                          editingPrices[config.id]?.[t.break_id]?.enabled !== false
                        ).length;
                        return (
                          <p className="text-white/40 text-xs">
                            {enabledCount} of {allTiers.length} tiers active
                          </p>
                        );
                      })()}
                    </div>
                    <button
                      onClick={() => addTier(config.id)}
                      className="flex items-center gap-1.5 bg-white/10 border border-white/20 text-white px-3 py-2 text-xs uppercase tracking-wider hover:bg-white/20 transition-all"
                    >
                      <Plus size={14} />
                      Add Tier
                    </button>
                  </div>
                  
                  <div className="space-y-3 mb-6">
                    {(customTiers[config.id] || config.blueprint.price_breaks)
                      .sort((a, b) => a.sort_order - b.sort_order)
                      .map((priceBreak, index) => {
                        const currentPrice = editingPrices[config.id]?.[priceBreak.break_id]?.price || '';
                        const isWholesale = config.blueprint?.slug.includes('wholesale');
                        const isCustom = priceBreak.break_id.startsWith('custom_tier_');
                        
                        const tierState = editingPrices[config.id]?.[priceBreak.break_id] || { price: '', enabled: true };
                        const tierEnabled = Boolean(tierState.enabled !== false);
                        
                        if (index === 0) {
                          console.log('📊 Rendering FIRST tier:');
                          console.log('  - breakId:', priceBreak.break_id);
                          console.log('  - tierState:', JSON.parse(JSON.stringify(tierState)));
                          console.log('  - enabled value:', tierState?.enabled);
                          console.log('  - tierEnabled (computed):', tierEnabled);
                          console.log('  - ALL prices:', JSON.parse(JSON.stringify(editingPrices[config.id])));
                        }
                        
                        return (
                          <div key={`${priceBreak.break_id}-${tierEnabled ? 'enabled' : 'disabled'}`} className={`bg-black/40 border border-white/10 p-4 transition-all ${!tierEnabled ? 'opacity-40' : ''}`}>
                            <div className="grid grid-cols-1 lg:grid-cols-12 gap-4 items-end">
                              {/* Enable Toggle */}
                              <div className="lg:col-span-1 flex flex-col">
                                <label className="block text-white/60 text-xs mb-2">Active</label>
                                <div className="flex items-center">
                                  <input
                                    type="checkbox"
                                    checked={tierEnabled}
                                    onChange={(e) => {
                                      e.stopPropagation();
                                      console.log('═══════════════════════════════');
                                      console.log('✅ CHECKBOX CLICKED');
                                      console.log('  - Tier:', priceBreak.label);
                                      console.log('  - breakId:', priceBreak.break_id);
                                      console.log('  - configId:', config.id);
                                      console.log('  - Current tierEnabled:', tierEnabled);
                                      console.log('  - Current tierState:', JSON.parse(JSON.stringify(tierState)));
                                      console.log('═══════════════════════════════');
                                      toggleTierEnabled(config.id, priceBreak.break_id);
                                    }}
                                    className="w-4 h-4 rounded border-white/20 cursor-pointer"
                                  />
                                </div>
                              </div>

                              {/* Tier Label */}
                              <div className="lg:col-span-3">
                                <label className="block text-white/60 text-xs mb-2">Tier Name</label>
                                <input
                                  type="text"
                                  value={priceBreak.label}
                                  onChange={(e) => updateTier(config.id, priceBreak.break_id, { label: e.target.value })}
                                  placeholder="e.g., Bulk Tier"
                                  disabled={!tierEnabled}
                                  className="w-full bg-white/5 border border-white/10 text-white placeholder-white/30 px-3 py-2 text-sm rounded focus:outline-none focus:border-white/30 disabled:opacity-50 disabled:cursor-not-allowed"
                                />
                              </div>

                              {/* Quantity Range (for wholesale tiered) */}
                              {isWholesale && config.blueprint.slug.includes('tiered') ? (
                                <>
                                  <div className="lg:col-span-2">
                                    <label className="block text-white/60 text-xs mb-2">Min Qty</label>
                                    <input
                                      type="number"
                                      value={priceBreak.min_qty || ''}
                                      onChange={(e) => updateTier(config.id, priceBreak.break_id, { min_qty: parseInt(e.target.value) || 1 })}
                                      placeholder="1"
                                      disabled={!tierEnabled}
                                      className="w-full bg-white/5 border border-white/10 text-white placeholder-white/30 px-3 py-2 text-sm rounded focus:outline-none focus:border-white/30 disabled:opacity-50 disabled:cursor-not-allowed"
                                    />
                                  </div>
                                  <div className="lg:col-span-2">
                                    <label className="block text-white/60 text-xs mb-2">Max Qty</label>
                                    <input
                                      type="number"
                                      value={priceBreak.max_qty || ''}
                                      onChange={(e) => updateTier(config.id, priceBreak.break_id, { max_qty: e.target.value ? parseInt(e.target.value) : null })}
                                      placeholder="∞"
                                      disabled={!tierEnabled}
                                      className="w-full bg-white/5 border border-white/10 text-white placeholder-white/30 px-3 py-2 text-sm rounded focus:outline-none focus:border-white/30 disabled:opacity-50 disabled:cursor-not-allowed"
                                    />
                                  </div>
                                  <div className="lg:col-span-1">
                                    <label className="block text-white/60 text-xs mb-2">Unit</label>
                                    <div className="text-white/80 text-sm px-3 py-2">
                                      {(() => {
                                        const currentUnit = displayUnits[config.id] || 'gram';
                                        const unitLabels: any = {
                                          'milligram': 'mg', 'gram': 'g', 'ounce': 'oz', 'pound': 'lb', 'kilogram': 'kg',
                                          'milliliter': 'ml', 'liter': 'L', 'fluid_ounce': 'fl oz', 'gallon': 'gal'
                                        };
                                        return unitLabels[currentUnit] || currentUnit;
                                      })()}
                                    </div>
                                  </div>
                                </>
                              ) : (
                                <div className="lg:col-span-2">
                                  <label className="block text-white/60 text-xs mb-2">Quantity</label>
                                  <div className="text-white/80 text-sm px-3 py-2">
                                    {priceBreak.qty}{priceBreak.unit}
                                  </div>
                                </div>
                              )}

                              {/* Price */}
                              <div className="lg:col-span-3">
                                <label className="block text-white/60 text-xs mb-2">
                                  Price per {(() => {
                                    const currentUnit = displayUnits[config.id] || 'gram';
                                    const unitLabels: any = {
                                      'milligram': 'mg',
                                      'gram': 'g',
                                      'ounce': 'oz',
                                      'pound': 'lb',
                                      'kilogram': 'kg',
                                      'milliliter': 'ml',
                                      'liter': 'L',
                                      'fluid_ounce': 'fl oz',
                                      'gallon': 'gal'
                                    };
                                    return unitLabels[currentUnit] || currentUnit;
                                  })()}
                                </label>
                                <div className="relative">
                                  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-white/60">$</span>
                                  <input
                                    type="number"
                                    step="0.01"
                                    value={currentPrice}
                                    onChange={(e) => updatePrice(config.id, priceBreak.break_id, e.target.value)}
                                    placeholder="0.00"
                                    disabled={!tierEnabled}
                                    className="w-full bg-white/5 border border-white/10 text-white placeholder-white/30 pl-7 pr-3 py-2.5 rounded focus:outline-none focus:border-white/30 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                  />
                                </div>
                              </div>

                              {/* Remove Button */}
                              <div className="lg:col-span-1 flex items-end">
                                <button
                                  onClick={() => removeTier(config.id, priceBreak.break_id)}
                                  disabled={!tierEnabled}
                                  className="w-full lg:w-auto p-2 hover:bg-red-500/10 text-red-500/60 hover:text-red-500 transition-all disabled:opacity-30 disabled:cursor-not-allowed"
                                  title="Remove tier"
                                >
                                  <Trash2 size={16} />
                                </button>
                              </div>
                            </div>

                            {/* Tier Info */}
                            <div className="mt-2 flex items-center justify-between">
                              <div className="text-white/40 text-xs">
                                {isWholesale && (priceBreak.min_qty || priceBreak.max_qty) && tierEnabled && (
                                  <span>
                                    Applies to orders of {priceBreak.min_qty || 1}–{priceBreak.max_qty || '∞'} {(() => {
                                      const currentUnit = displayUnits[config.id] || 'pound';
                                      const unitLabels: any = {
                                        'milligram': 'mg', 'gram': 'g', 'ounce': 'oz', 'pound': 'lbs', 'kilogram': 'kg',
                                        'milliliter': 'ml', 'liter': 'L', 'fluid_ounce': 'fl oz', 'gallon': 'gal'
                                      };
                                      return unitLabels[currentUnit] || currentUnit;
                                    })()}
                                  </span>
                                )}
                              </div>
                              {!tierEnabled && (
                                <span className="text-red-500/60 text-xs uppercase tracking-wider">
                                  Disabled - Not shown to customers
                                </span>
                              )}
                            </div>
                          </div>
                        );
                      })}
                  </div>

                  <div className="flex justify-end gap-3">
                    <button
                      onClick={() => saveConfig(config)}
                      disabled={saving}
                      className="flex items-center gap-2 bg-white text-black px-6 py-3 text-xs font-medium uppercase tracking-wider hover:bg-white/90 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
                    >
                      <Save size={16} />
                      {saving ? 'Saving...' : 'Save Configuration'}
                    </button>
                  </div>
                </div>
              </div>
            );
          })}

          {/* Available Blueprints to Enable */}
          {availableBlueprints.length > 0 && (
            <div className="bg-[#111111] border border-white/10 p-6 -mx-4 lg:mx-0">
              <h3 className="text-white font-medium text-sm uppercase tracking-wider mb-4">
                Add Pricing Structure
              </h3>
              <p className="text-white/50 text-xs mb-4">
                Enable additional pricing structures if you sell both retail and wholesale.
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {availableBlueprints.map((blueprint) => {
                  const isWholesale = blueprint.slug.includes('wholesale');
                  
                  return (
                    <div key={blueprint.id} className="bg-black/40 border border-white/10 p-4">
                      <div className="flex items-start justify-between gap-3 mb-3">
                        <div className="flex-1 min-w-0">
                          <h4 className="text-white text-sm font-medium mb-1">{blueprint.name}</h4>
                          <p className="text-white/40 text-xs leading-relaxed">{blueprint.description}</p>
                        </div>
                        {isWholesale ? (
                          <span className="px-2 py-0.5 bg-green-500/20 text-green-400 text-[10px] uppercase tracking-wider border border-green-500/30 flex-shrink-0">
                            Wholesale
                          </span>
                        ) : (
                          <span className="px-2 py-0.5 bg-blue-500/20 text-blue-400 text-[10px] uppercase tracking-wider border border-blue-500/30 flex-shrink-0">
                            Retail
                          </span>
                        )}
                      </div>
                      
                      <button
                        onClick={() => enableBlueprint(blueprint.id)}
                        disabled={saving}
                        className="w-full bg-white/10 border border-white/20 text-white px-4 py-2 text-xs uppercase tracking-wider hover:bg-white/20 disabled:opacity-50 transition-all"
                      >
                        Enable This Structure
                      </button>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Empty State */}
          {configs.length === 0 && availableBlueprints.length === 0 && (
            <div className="text-center py-12 bg-[#111111] border border-white/10 -mx-4 lg:mx-0">
              <DollarSign size={48} className="text-white/20 mx-auto mb-4" />
              <p className="text-white/60 mb-2">No pricing structures available</p>
              <p className="text-white/40 text-sm">Contact support to set up your pricing</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
